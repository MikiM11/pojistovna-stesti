//Str√°nka pro zobrazen√≠ seznamu poji≈°tƒõnc≈Ø

import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom"; // P≈ôid√°n√≠ navigace
import { FlashMessage } from "../components/FlashMessage";
import { Spinner } from "../components/Spinner";
import { apiGet } from "../utils/api";

function InsuredList() {
  const [insureds, setInsureds] = useState([]); // Poji≈°tƒõnci naƒçten√≠ z API
  const [error, setError] = useState(null); // Chybov√° zpr√°va
  const [selectedInsuredId, setSelectedInsuredId] = useState(null); // ID vybran√©ho poji≈°tƒõnce pro zobrazen√≠ detail≈Ø
  const [isLoading, setIsLoading] = useState(true); // Indik√°tor naƒç√≠t√°n√≠ dat
  const [filters, setFilters] = useState({
    firstName: "",
    lastName: "",
    street: "",
    city: "",
    postalCode: "",
  });
  const [totalRecords, setTotalRecords] = useState(0); // Celkov√Ω poƒçet z√°znam≈Ø

  // Filtry pro vyhled√°v√°n√≠
  const [currentPage, setCurrentPage] = useState(1); // Aktu√°ln√≠ str√°nka
  const [totalPages, setTotalPages] = useState(1); // Celkov√Ω poƒçet str√°nek
  const navigate = useNavigate(); // Navigace pro p≈ôesmƒõrov√°n√≠ na editaci

  const itemsPerPage = 10; // Poƒçet z√°znam≈Ø na str√°nku

  useEffect(() => {
    // Naƒç√≠t√°n√≠ poji≈°tƒõnc≈Ø z API p≈ôi zmƒõnƒõ filtr≈Ø nebo aktu√°ln√≠ str√°nky
    const loadInsureds = async () => {
      setIsLoading(true);
      try {
        const params = new URLSearchParams({
          ...filters,
          page: currentPage,
          limit: itemsPerPage,
        }).toString();
        const response = await apiGet(`insureds?${params}`);
        setInsureds(response.data || []); // Zajistit, ≈æe response.data je pole
        setTotalPages(response.totalPages || 1); // Zajistit, ≈æe totalPages m√° v√Ωchoz√≠ hodnotu
        setTotalRecords(response.totalRecords || 0); // Nastaven√≠ celkov√©ho poƒçtu poji≈°tƒõnc≈Ø
        setIsLoading(false);
      } catch (error) {
        setError("Chyba naƒç√≠t√°n√≠ dat. ...asi v√≠tr... ü§∑üèª‚Äç‚ôÇÔ∏è");
        setInsureds([]); // V√Ωchoz√≠ hodnota p≈ôi chybƒõ
        setIsLoading(false);
      }
    };

    loadInsureds();
  }, [filters, currentPage]);

  const handleRowClick = (insuredID) => {
    // Nastaven√≠ vybran√©ho poji≈°tƒõnce nebo zru≈°en√≠ v√Ωbƒõru
    setSelectedInsuredId(selectedInsuredId === insuredID ? null : insuredID);
  };

  const handleEditClick = (insuredID) => {
    // Navigace na str√°nku pro √∫pravu poji≈°tƒõnce
    navigate(`/upravit-pojistence/${insuredID}`);
  };

  const handleFilterChange = (e) => {
    // Aktualizace filtr≈Ø na z√°kladƒõ vstupn√≠ch pol√≠
    const { name, value } = e.target;
    setFilters({ ...filters, [name]: value });
    setCurrentPage(1); // Resetovat na prvn√≠ str√°nku p≈ôi zmƒõnƒõ filtru
  };

  const handleResetFilters = () => {
    // Resetov√°n√≠ v≈°ech filtr≈Ø
    setFilters({
      firstName: "",
      lastName: "",
      street: "",
      city: "",
      postalCode: "",
    });
    setCurrentPage(1); // Resetovat na prvn√≠ str√°nku p≈ôi resetov√°n√≠ filtr≈Ø
  };

  const handlePageChange = (pageNumber) => {
    // Nastaven√≠ aktu√°ln√≠ str√°nky
    setCurrentPage(pageNumber);
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h6>Je evidov√°no {totalRecords} poji≈°tƒõnc≈Ø</h6>
        <Link to="/pridat-pojistence" className="btn btn-outline-primary">
          P≈ôidat poji≈°tƒõnce
        </Link>
      </div>

      {/* Vyhled√°vac√≠ pole */}
      <div className="row mb-3 gx-2">
        <div className="col">
          <input
            type="text"
            className="form-control"
            placeholder="Jm√©no"
            name="firstName"
            value={filters.firstName}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col">
          <input
            type="text"
            className="form-control"
            placeholder="P≈ô√≠jmen√≠"
            name="lastName"
            value={filters.lastName}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col">
          <input
            type="text"
            className="form-control"
            placeholder="Ulice"
            name="street"
            value={filters.street}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col">
          <input
            type="text"
            className="form-control"
            placeholder="Mƒõsto"
            name="city"
            value={filters.city}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col">
          <input
            type="text"
            className="form-control"
            placeholder="PSƒå"
            name="postalCode"
            value={filters.postalCode}
            onChange={handleFilterChange}
          />
        </div>
      </div>

      <div className="d-flex justify-content-end mb-3">
        <button className="btn btn-outline-secondary me-2" onClick={handleResetFilters}>
          Resetovat filtry
        </button>
      </div>

      {isLoading && <Spinner />}
      {error && <FlashMessage message={error} type="danger" />}
      {!error && !isLoading && (
        <>
          <table className="table table-striped">
            <thead>
              <tr>
                <th>Jm√©no</th>
                <th>P≈ô√≠jmen√≠</th>
                <th>Ulice</th>
                <th>Mƒõsto</th>
                <th>PSƒå</th>
              </tr>
            </thead>
            <tbody>
              {insureds.map((insured) => (
                <React.Fragment key={insured._id}>
                  <tr
                    key={insured._id} // Unik√°tn√≠ kl√≠ƒç pro ≈ô√°dek poji≈°tƒõnce
                    onClick={() => handleRowClick(insured._id)}
                    className={selectedInsuredId === insured._id ? "table-active" : ""}
                  >
                    <td>{insured.firstName}</td>
                    <td>{insured.lastName}</td>
                    <td>{insured.street}</td>
                    <td>{insured.city}</td>
                    <td>{insured.postalCode}</td>
                  </tr>{selectedInsuredId === insured._id && (
                    // Unik√°tn√≠ kl√≠ƒç pro detailn√≠ ≈ô√°dek
                    <tr key={`${insured._id}-details`}>
                      <td colSpan="5">
                        <div className="p-3 bg-light border">
                          <h5>Detail poji≈°tƒõnce</h5>
                          <p>
                            <strong>Email:</strong> {insured.email}
                          </p>
                          <p>
                            <strong>Telefon:</strong> {insured.phone}
                          </p>
                          <h6>Seznam poji≈°tƒõn√≠</h6>
                          {insured.insurances && insured.insurances.length > 0 ? (
                            <ul>
                              {insured.insurances.map((insurance) => (
                                // Unik√°tn√≠ kl√≠ƒç pro poji≈°tƒõn√≠
                                <li key={insurance._id}>
                                  <strong>Typ: </strong> {insurance.type.name}
                                  <strong> P≈ôedmƒõt: </strong> {insurance.subject}
                                  <strong> ƒå√°stka: </strong> {insurance.amount} Kƒç
                                  <strong> Platnost: </strong>
                                  {new Date(insurance.validFrom).toLocaleDateString()} -{" "}
                                  {new Date(insurance.validTo).toLocaleDateString()}
                                </li>
                              ))}
                            </ul>
                          ) : (
                            <p>≈Ω√°dn√© sjednan√© poji≈°tƒõn√≠</p>
                          )}
                          <button
                            className="btn btn-outline-primary mt-3"
                            onClick={() => handleEditClick(insured._id)}
                          >
                            Upravit
                          </button>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))}
            </tbody>
          </table>

          {/* Str√°nkov√°n√≠ */}
          <nav>
            <ul className="pagination justify-content-center">
              <li className={`page-item ${currentPage === 1 ? "disabled" : ""}`}> {/*Pokud je prvn√≠ str√°nka, tlaƒç√≠tko je disabled*/}
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage - 1)}
                >
                  P≈ôedchoz√≠
                </button>
              </li>
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNumber) => (
                <li
                  key={pageNumber}
                  className={`page-item ${pageNumber === currentPage ? "active" : ""}`}
                >
                  <button
                    className="page-link"
                    onClick={() => handlePageChange(pageNumber)}
                  >
                    {pageNumber}
                  </button>
                </li>
              ))}
              <li className={`page-item ${currentPage === totalPages ? "disabled" : ""}`}> {/*Pokud je str√°nka posledn√≠, tlaƒç√≠tko je disabled*/}
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage + 1)}
                >
                  Dal≈°√≠
                </button>
              </li>
            </ul>
          </nav>
        </>
      )}
    </div>
  );
}

export default InsuredList;
